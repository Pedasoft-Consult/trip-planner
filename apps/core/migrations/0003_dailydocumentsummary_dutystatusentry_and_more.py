# Generated by Django 4.2.24 on 2025-09-26 05:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0002_add_eld_compliance_fields"),
    ]

    operations = [
        migrations.CreateModel(
            name="DailyDocumentSummary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField(help_text="24-hour period date")),
                (
                    "document_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total documents for this day"
                    ),
                ),
                (
                    "required_documents_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Count of required documents"
                    ),
                ),
                (
                    "has_minimum_documents",
                    models.BooleanField(
                        default=False,
                        help_text="Whether minimum required documents are present",
                    ),
                ),
                (
                    "exceeds_limit",
                    models.BooleanField(
                        default=False,
                        help_text="Whether document count exceeds 8-document limit",
                    ),
                ),
                ("has_bill_of_lading", models.BooleanField(default=False)),
                ("has_dispatch_record", models.BooleanField(default=False)),
                ("has_fuel_receipts", models.BooleanField(default=False)),
                (
                    "all_documents_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether all documents for this day are verified",
                    ),
                ),
                (
                    "total_duty_time",
                    models.DurationField(
                        blank=True, help_text="Total duty time for this day", null=True
                    ),
                ),
                (
                    "driving_time",
                    models.DurationField(
                        blank=True,
                        help_text="Total driving time for this day",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "core_daily_document_summary",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="DutyStatusEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "duty_status",
                    models.CharField(
                        choices=[
                            ("OFF", "Off Duty"),
                            ("SB", "Sleeper Berth"),
                            ("D", "Driving"),
                            ("ON", "On Duty (Not Driving)"),
                        ],
                        help_text="Driver duty status",
                        max_length=3,
                    ),
                ),
                (
                    "previous_duty_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("OFF", "Off Duty"),
                            ("SB", "Sleeper Berth"),
                            ("D", "Driving"),
                            ("ON", "On Duty (Not Driving)"),
                        ],
                        help_text="Previous duty status for change tracking",
                        max_length=3,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="GPS latitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="GPS longitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "location_method",
                    models.CharField(
                        choices=[
                            ("GPS", "GPS/GNSS"),
                            ("CELLULAR", "Cellular Tower"),
                            ("WIFI", "WiFi Location"),
                            ("MANUAL", "Manual Entry"),
                            ("UNKNOWN", "Unknown Method"),
                        ],
                        default="GPS",
                        help_text="Method used to determine location",
                        max_length=20,
                    ),
                ),
                (
                    "location_precision",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Location precision in meters",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "location_description",
                    models.CharField(
                        blank=True,
                        help_text="Human-readable location description",
                        max_length=200,
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=100)),
                ("state", models.CharField(blank=True, max_length=2)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                (
                    "odometer_reading",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Vehicle odometer reading at time of entry",
                        null=True,
                    ),
                ),
                (
                    "miles_driven_since_last",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        help_text="Miles driven since last duty status change",
                        max_digits=8,
                    ),
                ),
                (
                    "engine_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Engine hours at time of entry",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(help_text="Start time of this duty status"),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time of this duty status (when changed)",
                        null=True,
                    ),
                ),
                (
                    "is_automatic",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this entry was automatically generated by ELD",
                    ),
                ),
                (
                    "is_edited",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this entry has been edited by driver",
                    ),
                ),
                (
                    "location_trigger",
                    models.CharField(
                        choices=[
                            ("DUTY_CHANGE", "Duty Status Change"),
                            ("INTERVAL", "60-Minute Interval"),
                            ("POWER_ON", "Vehicle Power On"),
                            ("POWER_OFF", "Vehicle Power Off"),
                            ("MANUAL", "Manual Request"),
                        ],
                        default="DUTY_CHANGE",
                        help_text="What triggered this location recording",
                        max_length=20,
                    ),
                ),
                (
                    "shipping_document_number",
                    models.CharField(
                        blank=True,
                        help_text="Associated shipping document number",
                        max_length=100,
                    ),
                ),
                (
                    "driver_remarks",
                    models.TextField(
                        blank=True,
                        help_text="Driver comments or remarks for this entry",
                    ),
                ),
                (
                    "is_certified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this entry has been certified by driver",
                    ),
                ),
                (
                    "certification_date",
                    models.DateTimeField(
                        blank=True, help_text="When this entry was certified", null=True
                    ),
                ),
            ],
            options={
                "db_table": "core_duty_status_entry",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="ELDComplianceAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("MISSING_LOCATION", "Missing Location Data"),
                            ("MISSING_INTERVAL", "Missing 60-Minute Interval"),
                            ("EXCESSIVE_DOCUMENTS", "Excessive Supporting Documents"),
                            ("MISSING_DOCUMENTS", "Missing Required Documents"),
                            ("UNVERIFIED_DOCUMENTS", "Unverified Documents"),
                            ("HOS_VIOLATION", "Hours of Service Violation"),
                            ("DEVICE_MALFUNCTION", "ELD Device Malfunction"),
                            ("DATA_TRANSFER_FAILURE", "Data Transfer Failure"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Priority"),
                            ("MEDIUM", "Medium Priority"),
                            ("HIGH", "High Priority"),
                            ("CRITICAL", "Critical - Immediate Action Required"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "Open"),
                            ("IN_PROGRESS", "In Progress"),
                            ("RESOLVED", "Resolved"),
                            ("DISMISSED", "Dismissed"),
                        ],
                        default="OPEN",
                        max_length=15,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("alert_date", models.DateField()),
                ("alert_time", models.TimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("driver_notified", models.BooleanField(default=False)),
                ("office_notified", models.BooleanField(default=False)),
                ("notification_sent_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "core_eld_compliance_alert",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ELDDataTransferLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "transfer_type",
                    models.CharField(
                        choices=[
                            ("ROADSIDE", "Roadside Inspection"),
                            ("AUDIT", "Compliance Audit"),
                            ("ELECTRONIC", "Electronic Transfer"),
                            ("WEB_PORTAL", "Web Portal Download"),
                            ("EMAIL", "Email Transfer"),
                            ("USB", "USB Transfer"),
                            ("PRINT", "Printed Records"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INITIATED", "Transfer Initiated"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed Successfully"),
                            ("FAILED", "Transfer Failed"),
                            ("PARTIAL", "Partially Completed"),
                        ],
                        default="INITIATED",
                        max_length=15,
                    ),
                ),
                (
                    "requested_by",
                    models.CharField(
                        help_text="Authority or person requesting the data",
                        max_length=200,
                    ),
                ),
                (
                    "requesting_authority",
                    models.CharField(
                        blank=True,
                        help_text="Official authority (DOT, State Police, etc.)",
                        max_length=200,
                    ),
                ),
                (
                    "badge_number",
                    models.CharField(
                        blank=True,
                        help_text="Officer badge or ID number",
                        max_length=100,
                    ),
                ),
                ("data_start_date", models.DateField()),
                ("data_end_date", models.DateField()),
                ("transfer_initiated_at", models.DateTimeField(auto_now_add=True)),
                ("transfer_completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "transfer_location",
                    models.CharField(
                        blank=True,
                        help_text="Location where transfer occurred",
                        max_length=200,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "records_transferred",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of records transferred"
                    ),
                ),
                (
                    "file_format",
                    models.CharField(
                        choices=[
                            ("CSV", "CSV Format"),
                            ("JSON", "JSON Format"),
                            ("XML", "XML Format"),
                            ("PDF", "PDF Report"),
                            ("PRINT", "Printed Copy"),
                        ],
                        default="CSV",
                        max_length=20,
                    ),
                ),
                (
                    "file_size_mb",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Size of transferred data in MB",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "transfer_notes",
                    models.TextField(
                        blank=True, help_text="Notes about the transfer process"
                    ),
                ),
                (
                    "driver_signature_required",
                    models.BooleanField(
                        default=True, help_text="Whether driver signature was required"
                    ),
                ),
                (
                    "driver_signature_obtained",
                    models.BooleanField(
                        default=False, help_text="Whether driver signature was obtained"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error details if transfer failed"
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of retry attempts"
                    ),
                ),
            ],
            options={
                "db_table": "core_eld_data_transfer_log",
                "ordering": ["-transfer_initiated_at"],
            },
        ),
        migrations.CreateModel(
            name="ELDDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("BILL_OF_LADING", "Bill of Lading"),
                            ("DISPATCH_RECORD", "Dispatch Record"),
                            ("FUEL_RECEIPT", "Fuel Receipt"),
                            ("LOADING_DOCUMENTS", "Loading Documents"),
                            ("WEIGHT_STATION_BYPASS", "Weight Station Bypass"),
                            ("BORDER_CROSSING", "Border Crossing Documents"),
                            ("INSPECTION_REPORTS", "Inspection Reports"),
                            ("DELIVERY_RECEIPT", "Delivery Receipt"),
                            ("EXPENSE_RECEIPT", "Expense Receipt"),
                            ("LOGBOOK_PAGE", "Paper Logbook Page"),
                            ("PERMIT", "Special Permit"),
                            ("MANIFEST", "Cargo Manifest"),
                            ("OTHER", "Other Supporting Document"),
                        ],
                        help_text="Type of supporting document",
                        max_length=30,
                    ),
                ),
                (
                    "document_date",
                    models.DateField(
                        help_text="Date this document applies to (24-hour period)"
                    ),
                ),
                (
                    "document_time",
                    models.TimeField(
                        blank=True, help_text="Specific time if applicable", null=True
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Document title or description", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional document description"
                    ),
                ),
                (
                    "document_file",
                    models.FileField(
                        blank=True,
                        help_text="Scanned or digital copy of document",
                        upload_to="eld_documents/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "pdf",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "tiff",
                                    "doc",
                                    "docx",
                                ]
                            )
                        ],
                    ),
                ),
                (
                    "document_number",
                    models.CharField(
                        blank=True,
                        help_text="Document reference number (BOL#, invoice#, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "issuing_authority",
                    models.CharField(
                        blank=True,
                        help_text="Authority or organization that issued document",
                        max_length=200,
                    ),
                ),
                ("location_city", models.CharField(blank=True, max_length=100)),
                ("location_state", models.CharField(blank=True, max_length=2)),
                (
                    "location_description",
                    models.CharField(
                        blank=True,
                        help_text="Location where document was obtained/applies",
                        max_length=200,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this document is required for compliance",
                    ),
                ),
                (
                    "upload_method",
                    models.CharField(
                        choices=[
                            ("DRIVER_MOBILE", "Driver Mobile App"),
                            ("DRIVER_TABLET", "Driver ELD Tablet"),
                            ("OFFICE_SCAN", "Office Scan"),
                            ("EMAIL", "Email Upload"),
                            ("API", "API Integration"),
                            ("MANUAL", "Manual Entry"),
                        ],
                        default="DRIVER_MOBILE",
                        help_text="How document was uploaded to system",
                        max_length=20,
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether document has been verified by office staff",
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "driver_notes",
                    models.TextField(
                        blank=True, help_text="Driver notes about this document"
                    ),
                ),
                (
                    "office_notes",
                    models.TextField(
                        blank=True, help_text="Office staff notes about this document"
                    ),
                ),
            ],
            options={
                "db_table": "core_eld_document",
                "ordering": ["-document_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LocationTrackingEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("latitude", models.DecimalField(decimal_places=7, max_digits=10)),
                ("longitude", models.DecimalField(decimal_places=7, max_digits=10)),
                ("location_method", models.CharField(default="GPS", max_length=20)),
                (
                    "location_precision",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("recorded_at", models.DateTimeField()),
                ("odometer_reading", models.PositiveIntegerField()),
                ("engine_hours", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "miles_since_last_location",
                    models.DecimalField(decimal_places=1, default=0, max_digits=8),
                ),
                ("is_automatic", models.BooleanField(default=True)),
                (
                    "interval_sequence",
                    models.PositiveIntegerField(
                        help_text="Sequence number within driving session"
                    ),
                ),
            ],
            options={
                "db_table": "core_location_tracking_entry",
                "ordering": ["-recorded_at"],
            },
        ),
        migrations.RenameIndex(
            model_name="driver",
            new_name="core_driver_license_5ffe57_idx",
            old_name="core_driver_license_idx",
        ),
        migrations.RenameIndex(
            model_name="driver",
            new_name="core_driver_is_acti_459e9e_idx",
            old_name="core_driver_active_idx",
        ),
        migrations.RenameIndex(
            model_name="driver",
            new_name="core_driver_current_726046_idx",
            old_name="core_driver_duty_status_idx",
        ),
        migrations.RenameIndex(
            model_name="vehicle",
            new_name="core_vehicl_vin_167573_idx",
            old_name="core_vehicle_vin_idx",
        ),
        migrations.RenameIndex(
            model_name="vehicle",
            new_name="core_vehicl_license_026ac1_idx",
            old_name="core_vehicle_plate_idx",
        ),
        migrations.RenameIndex(
            model_name="vehicle",
            new_name="core_vehicl_is_acti_015ce0_idx",
            old_name="core_vehicle_active_idx",
        ),
        migrations.AddField(
            model_name="locationtrackingentry",
            name="driver",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="location_tracking_entries",
                to="core.driver",
            ),
        ),
        migrations.AddField(
            model_name="locationtrackingentry",
            name="duty_status_entry",
            field=models.ForeignKey(
                help_text="Associated driving duty status entry",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="location_intervals",
                to="core.dutystatusentry",
            ),
        ),
        migrations.AddField(
            model_name="locationtrackingentry",
            name="vehicle",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="location_tracking_entries",
                to="core.vehicle",
            ),
        ),
        migrations.AddField(
            model_name="elddocument",
            name="associated_duty_entries",
            field=models.ManyToManyField(
                blank=True,
                help_text="Duty status entries this document supports",
                related_name="supporting_documents",
                to="core.dutystatusentry",
            ),
        ),
        migrations.AddField(
            model_name="elddocument",
            name="driver",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="eld_documents",
                to="core.driver",
            ),
        ),
        migrations.AddField(
            model_name="elddocument",
            name="vehicle",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="eld_documents",
                to="core.vehicle",
            ),
        ),
        migrations.AddField(
            model_name="elddocument",
            name="verified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="verified_eld_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="elddatatransferlog",
            name="driver",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_transfers",
                to="core.driver",
            ),
        ),
        migrations.AddField(
            model_name="elddatatransferlog",
            name="vehicle",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_transfers",
                to="core.vehicle",
            ),
        ),
        migrations.AddField(
            model_name="eldcompliancealert",
            name="driver",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="compliance_alerts",
                to="core.driver",
            ),
        ),
        migrations.AddField(
            model_name="eldcompliancealert",
            name="related_document",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="compliance_alerts",
                to="core.elddocument",
            ),
        ),
        migrations.AddField(
            model_name="eldcompliancealert",
            name="related_duty_entry",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="compliance_alerts",
                to="core.dutystatusentry",
            ),
        ),
        migrations.AddField(
            model_name="eldcompliancealert",
            name="resolved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="resolved_compliance_alerts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="eldcompliancealert",
            name="vehicle",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="compliance_alerts",
                to="core.vehicle",
            ),
        ),
        migrations.AddField(
            model_name="dutystatusentry",
            name="driver",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="duty_status_entries",
                to="core.driver",
            ),
        ),
        migrations.AddField(
            model_name="dutystatusentry",
            name="vehicle",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="duty_status_entries",
                to="core.vehicle",
            ),
        ),
        migrations.AddField(
            model_name="dailydocumentsummary",
            name="driver",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="daily_document_summaries",
                to="core.driver",
            ),
        ),
        migrations.AddIndex(
            model_name="locationtrackingentry",
            index=models.Index(
                fields=["driver", "-recorded_at"], name="core_locati_driver__19e7d7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="locationtrackingentry",
            index=models.Index(
                fields=["vehicle", "-recorded_at"],
                name="core_locati_vehicle_3ad93e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="locationtrackingentry",
            index=models.Index(
                fields=["duty_status_entry", "interval_sequence"],
                name="core_locati_duty_st_9e8f21_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="locationtrackingentry",
            index=models.Index(
                fields=["latitude", "longitude"], name="core_locati_latitud_f9e4c4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="locationtrackingentry",
            unique_together={("duty_status_entry", "interval_sequence")},
        ),
        migrations.AddIndex(
            model_name="elddocument",
            index=models.Index(
                fields=["driver", "-document_date"],
                name="core_eld_do_driver__390f19_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="elddocument",
            index=models.Index(
                fields=["vehicle", "-document_date"],
                name="core_eld_do_vehicle_1bb43f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="elddocument",
            index=models.Index(
                fields=["document_type"], name="core_eld_do_documen_276816_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="elddocument",
            index=models.Index(
                fields=["document_date"], name="core_eld_do_documen_4b5596_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="elddocument",
            index=models.Index(
                fields=["is_required"], name="core_eld_do_is_requ_f3edb7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="elddocument",
            index=models.Index(
                fields=["is_verified"], name="core_eld_do_is_veri_f16000_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="elddatatransferlog",
            index=models.Index(
                fields=["driver", "-transfer_initiated_at"],
                name="core_eld_da_driver__484107_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="elddatatransferlog",
            index=models.Index(
                fields=["vehicle", "-transfer_initiated_at"],
                name="core_eld_da_vehicle_b8eb82_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="elddatatransferlog",
            index=models.Index(fields=["status"], name="core_eld_da_status_1b4924_idx"),
        ),
        migrations.AddIndex(
            model_name="elddatatransferlog",
            index=models.Index(
                fields=["transfer_type"], name="core_eld_da_transfe_391652_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="elddatatransferlog",
            index=models.Index(
                fields=["data_start_date", "data_end_date"],
                name="core_eld_da_data_st_0ff4ef_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="eldcompliancealert",
            index=models.Index(
                fields=["driver", "-alert_date"], name="core_eld_co_driver__75ab12_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eldcompliancealert",
            index=models.Index(fields=["status"], name="core_eld_co_status_995f22_idx"),
        ),
        migrations.AddIndex(
            model_name="eldcompliancealert",
            index=models.Index(
                fields=["severity"], name="core_eld_co_severit_3bc886_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eldcompliancealert",
            index=models.Index(
                fields=["alert_type"], name="core_eld_co_alert_t_78fe93_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dutystatusentry",
            index=models.Index(
                fields=["driver", "-start_time"], name="core_duty_s_driver__733bb5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dutystatusentry",
            index=models.Index(
                fields=["vehicle", "-start_time"], name="core_duty_s_vehicle_5f58e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dutystatusentry",
            index=models.Index(
                fields=["duty_status"], name="core_duty_s_duty_st_bdee65_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dutystatusentry",
            index=models.Index(
                fields=["is_automatic"], name="core_duty_s_is_auto_5cb103_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dutystatusentry",
            index=models.Index(
                fields=["location_trigger"], name="core_duty_s_locatio_0d4dae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dutystatusentry",
            index=models.Index(
                fields=["latitude", "longitude"], name="core_duty_s_latitud_ae4ad7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dailydocumentsummary",
            index=models.Index(
                fields=["driver", "-date"], name="core_daily__driver__7229e6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dailydocumentsummary",
            index=models.Index(fields=["date"], name="core_daily__date_404116_idx"),
        ),
        migrations.AddIndex(
            model_name="dailydocumentsummary",
            index=models.Index(
                fields=["has_minimum_documents"], name="core_daily__has_min_aa00c7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dailydocumentsummary",
            index=models.Index(
                fields=["exceeds_limit"], name="core_daily__exceeds_88e3c4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dailydocumentsummary",
            unique_together={("driver", "date")},
        ),
    ]
